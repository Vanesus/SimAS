//SimAS  /  Gramatica
//Gramatica

package es.uco.simas.util.gramatica;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.draw.LineSeparator;
import com.itextpdf.text.pdf.PdfWriter;
import es.uco.simas.editor.ColCanLR0;
import es.uco.simas.editor.ColCanLR1;
import es.uco.simas.editor.ColCanLALR;
import es.uco.simas.editor.Editor;
import es.uco.simas.editor.TablaLR;
import es.uco.simas.editor.TablaPredictiva;
import java.util.*;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.DefaultListModel;
import java.io.*;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * @author vanesa
 */
public class Gramatica extends javax.swing.JFrame {

    public String nombre;
    public String descripcion;
    public String simbInicial;
    public int estado;
    ArrayList<Terminal> terminales = new ArrayList<>();
    ArrayList<NoTerminal> noTerminales = new ArrayList<>();
    ArrayList<Produccion> pr = new ArrayList<>();
    DefaultListModel noTerm = new DefaultListModel();
    DefaultListModel term = new DefaultListModel();    
    DefaultListModel producciones = new DefaultListModel();
    TablaPredictiva tpredictiva = new TablaPredictiva();
    TablaLR tlr;
    ColCanLR0 coleccionLR0; 
    ColCanLR1 coleccionLR1;
    ColCanLALR coleccionLALR;
    
    
    public Gramatica (String nombre, String descripcion){
        this.nombre = nombre;
        this.descripcion = descripcion;
    }
    
    public Gramatica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public int getEstado() {
        return estado;
    }

    public void setEstado(int estado) {
        this.estado = estado;
    }
    
    public    void setVocabulario(  DefaultListModel noTerm,  DefaultListModel term) {
      this.noTerm.clear();
      this.noTerminales.clear();
      this.term.clear();
      this.terminales.clear();
      int i= 0;
      if(noTerm!=  null) {
            i=0;
            while(true) {
                if(i >= noTerm.size())  {
                    break;
                }
                if(i <noTerm.size())   {
                    NoTerminal noterminal = new NoTerminal((String)noTerm.get(i),(String)noTerm.get(i));
                    this.noTerminales.add(noterminal);
                    i = i+1;
                }
            }
        }
        if(term !=  null) {            
            i=0;
            while(true)  {
                if(i >= term.size())   {
                    break;
                }
                if(i <term.size())  {
                    Terminal terminal = new Terminal((String)term.get(i), (String)term.get(i));
                    this.terminales.add(terminal);
                    i = i+1;     
                } 
            }
        }    
    }
    public DefaultListModel getNoTerminales(){
        return this.noTerm;
    }

    public ArrayList<Terminal> getTerm() {
        return terminales;
    }

    public ArrayList<NoTerminal> getNoTerm() {
        return noTerminales;
    }
       
    public void setNoTerminales(DefaultListModel noTerminales){
        this.noTerminales.clear();       
        this.noTerm = noTerminales;
        
         int i=0;
         if(noTerminales !=null){
            while(i < this.noTerm.size()){
                NoTerminal nt = new NoTerminal(this.noTerm.getElementAt(i).toString(),this.noTerm.getElementAt(i).toString());
                this.noTerminales.add(nt);
                i++;
            }
        }
    }
    
    public DefaultListModel getTerminales(){
        return term;
    }
    
     public void setTerminales(DefaultListModel te){
         this.terminales.clear();
         this.term.clear();   
         int i=0;
         
         if(te != null){
            this.term = te;
             if(terminales !=null){
               while(i < this.term.size()){
                   Terminal t = new Terminal(this.term.getElementAt(i).toString(),this.term.getElementAt(i).toString());
                   this.terminales.add(t);
                   i++;
               }
             }
         }
     }

    public void setTerminales(ArrayList<Terminal> terminales) {
        this.terminales = terminales;
    }
     
    public DefaultListModel getProducciones() {
        return producciones;
    }

    public ArrayList<Produccion> getPr() {
        return pr;
    }

    public void setPr(ArrayList<Produccion> pr) {
        this.pr = pr;
    }            
    
    public void setProducciones(DefaultListModel produc){
        
        this.producciones = produc;    
        this.pr = new ArrayList();
        
        int i,j= 0;
        if(produc!=  null)  {
          i=0;
          
            while(i < produc.size()){
                
                String valor = produc.getElementAt(i).toString();
                String antec = "";
                String [] separado;
                separado = valor.split(" ");
                
                Antecedente antecedente = new Antecedente();
                ArrayList<Simbolo> consecuente = new ArrayList<>();
                antec = separado[0];
                
               
                j=2;
                while(j < separado.length){
                    
                    Simbolo simb = new Simbolo(separado[j],separado[j]);
                    
                     consecuente.add(simb);
                    j++;
                }
                NoTerminal nt = new NoTerminal(null,null);
                nt.setValor(antec);
                nt.setNombre(antec);
                antecedente.setSimboloNT(nt);
                Produccion produccion = new Produccion();
                produccion.setAntec(antecedente);
                produccion.setConsec(consecuente);
                this.pr.add(produccion);
          
              i ++;
            }  
        }      
    }        
 
    public void setSimbInicial(String simInicial){
        this.simbInicial = simInicial;
    }
    
    public String getSimbInicial(){
        return this.simbInicial;
    }
    
    public void selecSimboloInicial(String simInicial){
            
        int i= 0;
        if(this.noTerminales!=  null) {
            i=0;
            while(true)   {
                if(i >= this.noTerminales.size()) {
                break;
                }
                if(i <this.noTerminales.size())  {
                    if(noTerminales.get(i).toString().equals(simInicial)){

                        this.noTerminales.get(i).setSimboloInicial(true);
                        break;
                    }else{
                    i = i+1;
                    }
               }
            }
        }
     }
    
    public int guardarGramatica( )  {
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de XML", "xml");
        JFileChooser fileChooserGuardar = new JFileChooser();
        fileChooserGuardar.setFileFilter(filtro);
        fileChooserGuardar.setDialogTitle("Guardar");
        String documentoXml= "";
        FileWriter fstream= null;
        BufferedWriter out= null;
        String nombreFichero= null;
        String causasError= null;
        String codigoError= null;
        JFileChooser selector= null;
        String mensajeError= null;

        int seleccion = fileChooserGuardar.showSaveDialog(null);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File file = fileChooserGuardar.getSelectedFile();
            StringBuilder doc = new StringBuilder();
            documentoXml =doc.append(documentoXml).append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n").toString();
            StringBuilder doc2 = new StringBuilder();
            documentoXml =doc2.append(documentoXml).append("<?xml-stylesheet type=\"text/xsl\" href=\"gramatica.xsl\"?>\n").toString();
            StringBuilder doc3 = new StringBuilder();
            documentoXml =doc3.append(documentoXml).append("<grammar>\n").toString();
            StringBuilder nombre = new StringBuilder();
            documentoXml =nombre.append(documentoXml).append("\t<name>").append(this.getNombre()).append("</name>\n").toString();
            StringBuilder desc = new StringBuilder();
            documentoXml =desc.append(documentoXml).append("\t<description>").append(this.getDescripcion()).append("</description>\n").toString();
            StringBuilder nTerm = new StringBuilder();
            documentoXml =nTerm.append(documentoXml).append("\t<non-terminal-symbols>\n").toString();
            int i=0;
            while(true)   {
                if(i >= this.noTerminales.size())  {
                    break;
                }
                if(i < this.noTerminales.size())   {
                    StringBuilder JdecGenerated162 = new StringBuilder();
                    documentoXml =JdecGenerated162.append(documentoXml).append("\t\t<non-terminal>\n\t\t\t<value>").append(this.getNoTerminales().get(i)).append("</value>\n\t\t</non-terminal>\n").toString();
                    i = i+1;
                    continue  ;
                }

            }
            StringBuilder JdecGenerated210 = new StringBuilder();
            documentoXml =JdecGenerated210.append(documentoXml).append("\t</non-terminal-symbols>\n").toString();
            StringBuilder JdecGenerated230 = new StringBuilder();
            documentoXml =JdecGenerated230.append(documentoXml).append("\t<terminal-symbols>\n").toString();
            i=0;
            while(true) {
                if(i >= this.terminales.size()) {
                      break;
                }
                if(i < this.terminales.size())  {
                  StringBuilder JdecGenerated263 = new StringBuilder();
                  documentoXml =JdecGenerated263.append(documentoXml).append("\t\t<terminal>\n\t\t\t<value>").append(this.getTerminales().get(i)).append("</value>\n\t\t</terminal>\n").toString();
                  i = i+1;
                  continue  ;
                }

            }
            StringBuilder JdecGenerated311 = new StringBuilder();
            documentoXml =JdecGenerated311.append(documentoXml).append("\t</terminal-symbols>\n").toString();
            StringBuilder JdecGenerated331 = new StringBuilder();
            documentoXml =JdecGenerated331.append(documentoXml).append("\t<init-symbol>").append(this.getSimbInicial()).append("</init-symbol>\n").toString();
            StringBuilder JdecGenerated366 = new StringBuilder();
            documentoXml =JdecGenerated366.append(documentoXml).append("\t<rule-set>\n").toString();
            i=0;
            if(this.producciones != null){
                while(true)    {
                    if(i >= this.producciones.size()){
                        break;
                    }
                    if(i < this.producciones.size()) {
                        StringBuilder JdecGenerated399 = new StringBuilder();
                        documentoXml =JdecGenerated399.append(documentoXml).append("\t\t<rule>\n\t\t\t<value>").append(this.getProducciones().get(i)).append("</value>\n\t\t</rule>\n").toString();
                        i = i+1;
                    }
                }
            }
            StringBuilder JdecGenerated859 = new StringBuilder();
            documentoXml =JdecGenerated859.append(documentoXml).append("\t</rule-set>\n").toString();
            StringBuilder JdecGenerated879 = new StringBuilder();
            documentoXml =JdecGenerated879.append(documentoXml).append("</grammar>\n").toString();

            try   {
                nombreFichero=fileChooserGuardar.getSelectedFile().toString();
                if(!nombreFichero.contains(".xml"))   {
                    StringBuilder JdecGenerated998 = new StringBuilder();
                    nombreFichero =JdecGenerated998.append(nombreFichero).append(".xml").toString();
                }

                FileWriter JdecGenerated1020 = new FileWriter(nombreFichero);
                fstream=JdecGenerated1020;
                BufferedWriter JdecGenerated1031 = new BufferedWriter(fstream);
                out=JdecGenerated1031;
                out.write(documentoXml);
                out.close();
                return 1;

            }  catch(IOException  e)  {
                codigoError="E-8";
                mensajeError="Error de entrada-salida al guardar el fichero de gram\u00e1tica.";
                StringBuilder JdecGenerated1065 = new StringBuilder();
                causasError=JdecGenerated1065.append("<br/>&nbsp;&nbsp;&nbsp;&nbsp;<b>Causas del error</b><br/><blockquote><ul><li>No hay espacio de disco <b>suficiente</b>.<br><br/></li><li>No tienes <b>permisos de escritura</b> en el directorio.<br><br/></li><li>El sistema de archivos est\u00e1 <b>fallando</b></li></ul></blockquote>&nbsp;&nbsp;&nbsp;&nbsp;<b>Soluciones</b><blockquote><ul><li>Revisa que hay <b>espacio libre</b> en el disco<br><br/></li><li>Revisa que tienes <b>permisos de escritura</b> en el directorio de guardado.<br><br/></li><li>Revisa que el sistema de archivos no est\u00e9 fallando y comprueba la <b>excepci\u00f3n java</b> para m\u00e1s informaci\u00f3n.</li></ul></blockquote>&nbsp;&nbsp;&nbsp;&nbsp;<b>Excepci\u00f3n JAVA</b><blockquote><b>IOException</b>: ").append(e.getLocalizedMessage().toString()).append("<br/></blockquote>").toString();
            }
          return -1;
        }
        return -2;
     }
  
    public    Gramatica cargarGramatica( )  {
        FileNameExtensionFilter filtro= null;
        Gramatica gramatica= null;
        JFileChooser selector= null;

        JFileChooser JdecGenerated23 = new JFileChooser();
        selector=JdecGenerated23;
        FileNameExtensionFilter JdecGenerated10 = new FileNameExtensionFilter("Gramaticas de SimAS (.xml)",new String[]{"xml"});    
        filtro=JdecGenerated10;
        selector.setFileFilter(filtro);

        if(selector.showOpenDialog(null)==0) {
            Gramatica gram = new Gramatica();
            gramatica=gram;
            if(gramatica!=  null) {         
                StringBuilder JdecGenerated72 = new StringBuilder();             
            }
        }

        String nombreFichero = null;
        if(selector.getSelectedFile() != null)
            nombreFichero=selector.getSelectedFile().toString();
        
        Document doc= null;
        DocumentBuilder db= null;
        DocumentBuilderFactory dbf= null;
        Element elemento= null;
        Element elementoAntecedente= null;
        Element elementoConsecuente= null;
        Element elementoTipo= null;
        Element elementoValor= null;
        File file= null;      
        NoTerminal noTerminal= null;
        Node nodo= null;
        Node nodoAntecedente= null;
        Node nodoConsecuente= null;
        Node nodoTipo= null;
        Node nodoValor= null;
        NodeList description= null;
        NodeList initSymbol= null;
        NodeList name= null;
        NodeList nodeNonTerminalSymbols= null;
        NodeList nodeRules= null;
        NodeList nodeTerminalSymbols= null;
        NodeList valueNode= null;
        NodeList valueNodeAntecedente= null;
        NodeList valueNodeConsecuente= null;
        NodeList valueNodoTipo= null;
        NodeList valueNodoValor= null;
        Produccion produccion= null;
        String causasError= null;
        String codigoError= null;
        String descripcion= null;
        String mensajeError= null;
        String nombre= null;
        String simboloInicial= null;
        Terminal terminal= null;
        DefaultListModel NT = new DefaultListModel();
        DefaultListModel term = new DefaultListModel();
        DefaultListModel prod = new DefaultListModel();

        int i= 0;
        int j= 0;
        try    {
            if(nombreFichero != null)   {
                File JdecGenerated2 = new File(nombreFichero);
                file=JdecGenerated2;
                dbf=DocumentBuilderFactory.newInstance();
                db=dbf.newDocumentBuilder();
                doc=db.parse(file);
                doc.getDocumentElement().normalize();
                name=doc.getDocumentElement().getElementsByTagName("name");
                nombre=name.item(0).getChildNodes().item(0).getNodeValue().toString();
                description=doc.getDocumentElement().getElementsByTagName("description");
                descripcion=description.item(0).getChildNodes().item(0).getNodeValue().toString();
                Gramatica JdecGenerated129 = new Gramatica(nombre,descripcion);
                gramatica=JdecGenerated129;
                nodeNonTerminalSymbols=doc.getElementsByTagName("non-terminal");
                i=0;
                while(true) {
                    if(i >= nodeNonTerminalSymbols.getLength())  {
                        gramatica.setNoTerminales(NT);
                        break;
                    }
                    if(i < nodeNonTerminalSymbols.getLength()) {
                        nodo=nodeNonTerminalSymbols.item(i);
                        elemento=(Element)nodo;
                        valueNode=elemento.getElementsByTagName("value");
                        NT.addElement(valueNode.item(0).getChildNodes().item(0).getNodeValue());
                        i = i+1;
                        continue  ;
                    }

                }
                nodeTerminalSymbols=doc.getElementsByTagName("terminal");
                i=0;
                while(true) {
                    if(i >= nodeTerminalSymbols.getLength()) {
                        gramatica.setTerminales(term);
                        break;
                    }
                    if(i < nodeTerminalSymbols.getLength()){
                        nodo=nodeTerminalSymbols.item(i);
                        elemento=(Element)nodo;
                        valueNode=elemento.getElementsByTagName("value");
                        term.addElement(valueNode.item(0).getChildNodes().item(0).getNodeValue());                      
                        i = i+1;
                        continue  ;
                    }

                }
                this.setVocabulario(NT, term);
                initSymbol=doc.getDocumentElement().getElementsByTagName("init-symbol");
                simboloInicial=initSymbol.item(0).getChildNodes().item(0).getNodeValue().toString();
                gramatica.setSimbInicial(simboloInicial);

                nodeRules=doc.getElementsByTagName("rule");
                i=0;
                while(true) {
                    if(i >= nodeRules.getLength()) {
                        break;
                    }
                    if(i < nodeRules.getLength()) {
                        nodo=nodeRules.item(i);
                        elemento=(Element)nodo;
                        valueNode=elemento.getElementsByTagName("value");
                        prod.addElement(valueNode.item(0).getChildNodes().item(0).getNodeValue());

                        i = i+1;
                    }
                }
                gramatica.setProducciones(prod);

                return gramatica;
            }
            
        } catch(IOException  e)   {
          codigoError="E-6";
          mensajeError="Error de formato al cargar el fichero de gram\u00e1tica.";
          StringBuilder JdecGenerated713 = new StringBuilder();
          causasError=JdecGenerated713.append("<br/>&nbsp;&nbsp;&nbsp;&nbsp;<b>Causas del error</b><br/><blockquote><ul><li>El formato de la gram\u00e1tica no es correcto. \u00bfHas modificado el fichero manualmente?.<br><br/></li><li>Es posible que el fichero est\u00e9 corrupto, debido a un fallo del S.O. o del sistema de archivos.</li></ul></blockquote>&nbsp;&nbsp;&nbsp;&nbsp;<b>Soluciones</b><blockquote><ul><li>Crea la gram\u00e1tica de nuevo a partir de un informe de gram\u00e1tica o intenta recuperarla de otro fichero. Este error es cr\u00edtico y no se puede <b>recuperar</b> la gram\u00e1tica del fichero da\u00f1ado.<br><br/></li><li>Podr\u00edas intentar seguir la <b>excepci\u00f3n de java</b> e intentar <b>reconstruir</b> el fichero (no es recomendable)</li></ul></blockquote>&nbsp;&nbsp;&nbsp;&nbsp;<b>Excepci\u00f3n JAVA</b><blockquote><b>SAXParseException</b>: ").append(e.getLocalizedMessage().toString().replaceAll("/","\u2215").replaceAll("<","").replaceAll(">","")).append("<br/></blockquote>").toString();
     
        }   catch (ParserConfigurationException ex) {
            Logger.getLogger(Gramatica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(Gramatica.class.getName()).log(Level.SEVERE, null, ex);
        }
  
        return null;
     }

     public    ArrayList<String> validarGramatica(  )  {

        ArrayList<String> mensajesError = new ArrayList();
        ArrayList<Simbolo> conjSimbolos= new ArrayList();
        Antecedente antec = new Antecedente();

        Iterator i= null;       
        Antecedente antecedente= null;
        Produccion produccion= new Produccion();
        Simbolo simbolo= null;
        NoTerminal nt = null;
        Terminal t = null;
        int encontrado= 0;
        int errorIndex= 0;
        int simbolosNoTerminalesEncontrados= 0;
        int simbolosTerminalesEncontrados= 0;
        errorIndex=1;
        this.setEstado(1);

        if(this.producciones==null) {
            this.setEstado(-1);
            StringBuilder mensaje = new StringBuilder();
            mensajesError.add(mensaje.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>No existen producciones</i>.</font><br> La gramática no contiene ninguna <b>produccion</b>. Debería contener al menos una para poder ser válida.<br></br>").toString());
        }
        if(this.terminales.isEmpty() == true) {
            this.setEstado(-1);
            StringBuilder mensaje = new StringBuilder();
            mensajesError.add(mensaje.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>No existen símbolos terminales</i></font>.<br> La gramática no contiene ningún <b>símbolo terminal</b>. Debería contener al menos uno para poder ser válida.<br></br>").toString());
        }
        if(this.noTerminales.isEmpty() == true){
            this.setEstado(-1);
            StringBuilder mensaje = new StringBuilder();
            mensajesError.add(mensaje.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>No existen símbolos no terminales</i></font>.<br> La gramática no contiene ningún símbolo <b>no terminal</b>. Debería contener al menos uno para poder ser válida.<br></br>").toString());

        }
        if(this.simbInicial == null) {
            this.setEstado(-1);
            StringBuilder mensaje = new StringBuilder();
            mensajesError.add(mensaje.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>Símbolo inicial no asignado</i></font>.<br> La gramática no tiene asignado el símbolo <b>inicial</b>.<br></br>").toString());
        }

        //Simbolo terminal no aparece en el consecuente de ninguna produccion
        int j=0;
        int k=0;
        int l=0;

        while(j< this.terminales.size()){      
            t = this.terminales.get(j);
            encontrado = 0;
            k=0;
            while(k < this.pr.size()){

                conjSimbolos = pr.get(k).getConsec();
                l=0;
                while(l< conjSimbolos.size()){
                    if(conjSimbolos.get(l).getValor().equals(t.getValor())){
                        encontrado = 1;
                    }
                       l++;
                }   
                  k++;            
            }
            if(encontrado == 0){
                this.setEstado(-1);
                StringBuilder str = new StringBuilder();
                mensajesError.add(str.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>Simbolo terminal no usado</i></font>.<br> El símbolo terminal <b>").append(t.getNombre()).append("</b> no aparece en ningún <b>consecuente</b> de ninguna produccion.<br></br>").toString());   
            }
            j++;

        }

        //Simbolo no terminal no aparece en el consecuente de ninguna produccion
        j=0;

        while(j< this.noTerminales.size()){
            nt = this.noTerminales.get(j);
            encontrado = 0;
            k=0;
            while(k < this.pr.size()){

                conjSimbolos = pr.get(k).getConsec();
                l=0;
                while(l< conjSimbolos.size()){              
                    if(nt.getValor().equals(this.getSimbInicial())){
                        encontrado = 1;
                        l++;
                    }else{
                      if(conjSimbolos.get(l).getValor().equals(nt.getValor())){
                        encontrado = 1;
                        l=conjSimbolos.size();
                      } else
                            l++;
                    }
                }
                    k++;   

            }
            if(encontrado == 0){
                this.setEstado(-1);
                StringBuilder str = new StringBuilder();
                mensajesError.add(str.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>Simbolo no terminal no usado</i></font>.<br> El símbolo no terminal <b>").append(nt.getNombre()).append("</b> no aparece en ningún <b>consecuente</b> de ninguna produccion.<br></br>").toString());   
            }  
            j++;
        }

        //Simbolo no terminal no aparece en el antecedente de ninguna produccion
         j=0;

        while(j< this.noTerminales.size()){
            nt = this.noTerminales.get(j);
            encontrado = 0;
            k=0;
            while(k < this.pr.size()){
                produccion = this.pr.get(k);
                antec = pr.get(k).getAntec();

                if(nt.getValor().equals(antec.getSimboloNT().getValor())){
                    encontrado = 1;
                }
                    k++;
            }
            if(encontrado==0) {
                this.setEstado(-1);
                StringBuilder str = new StringBuilder();
                mensajesError.add(str.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>Simbolo no terminal no usado</i></font>.<br> El símbolo no terminal <b>").append(nt.getNombre()).append("</b> no aparece en el <b>antecedente</b> de ninguna produccion.<br></br>").toString());
            }
         j++;
        }

        //Simbolo no terminal del antecedente no esta en el conjunto de simbolos no terminales de la gramatica
        j=0;
        while(j < this.pr.size()){

            nt = new NoTerminal(this.pr.get(j).getAntec().getSimboloNT().getValor(), this.pr.get(j).getAntec().getSimboloNT().getValor());

            encontrado = 0;
            k=0;
            while(k< this.noTerminales.size()){

                if(nt.getValor().equals(this.noTerminales.get(k).getValor())){
                    encontrado = 1;
                }
                    k++;
            }
            if(encontrado == 0){
                this.setEstado(-1);
                StringBuilder str = new StringBuilder();
                mensajesError.add(str.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>Simbolo no terminal inexistente</i></font><br>. El símbolo no terminal <b>").append(this.pr.get(j).getAntec().getSimboloNT().getNombre()).append("</b>, que es el antecedente de la produccion <b>").append("</b>, no está contenido en el conjunto de símbolos <b>no terminales</b> de la gramática.<br></br>").toString());
            }
            j++;
        }  

        //Simbolo no terminal del consecuente no está en el conjunto de Simbolos no terminales
        j=0;

        while(j < this.pr.size()){
            conjSimbolos = pr.get(j).getConsec();

            encontrado = 0;
            k=0;

            while(k< conjSimbolos.size()){
                encontrado = 0;
                simbolo = conjSimbolos.get(k);

                if(simbolo.getValor().equals("\u03b5")){
                    encontrado = 1;
               }else{
                    l=0;
                    while(l < this.noTerminales.size()){
                        nt = this.noTerminales.get(l);

                        if(nt.getValor().equals(simbolo.getValor())){
                            encontrado = 1;
                        }
                          l++;
                    }
                    int m=0;
                    if(encontrado ==0){
                        while(m < this.terminales.size()){
                            t = this.terminales.get(m);

                            if(t.getValor().equals(simbolo.getValor())){
                                encontrado = 1;
                            }
                         m++;

                        }
                    }

                }
                k++;

                if(encontrado == 0){
                    this.setEstado(-1);
                    StringBuilder str = new StringBuilder();
                    mensajesError.add(str.append("<b>").append(errorIndex++).append("</b>").append(". <font color=\"red\"><i>Consecuente erroneo</i></font>.<br> El símbolo <b>").append(simbolo.getNombre()).append("</b> del <b>consecuente</b> de la produccion, no pertenece al conjunto de símbolos declarado.<br></br>").toString());   
                }  
            }
            j++; 
        }

        return mensajesError;
     }

     public Boolean generarInforme(String fichero) throws DocumentException{

         if(this.estado==1){
            try {                
                String font = "fonts/arial.ttf";
                com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.LETTER , 45, 45, 54, 45);
                 Image imagen = Image.getInstance("./src/es/uco/simas/resources/logo2Antes.png");
                 imagen.setAlignment(com.itextpdf.text.Element.ALIGN_CENTER);
                 imagen.scalePercent(40);
                 
                 LineSeparator ls = new LineSeparator();
                  BaseFont bf;
                  bf = BaseFont.createFont(font, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                  
                  Font titulo = new Font(bf, 21, Font.BOLD);
                  Font font2 = new Font(bf, 15, Font.BOLD);
                  Font font3 = new Font(bf, 12);
                  BaseColor claro = new BaseColor(63,171,160);
                  
                  titulo.setColor(33, 77, 72);
                  font2.setColor(BaseColor.BLACK);
 
                  ls.setLineWidth(1);
                  ls.setLineColor(claro);                                                  
                  
                 Paragraph parrafo = new Paragraph(" INFORME DE LA GRAMÁTICA ", titulo);
                 parrafo.setAlignment(com.itextpdf.text.Element.ALIGN_CENTER);
                 Paragraph parrafo1 = new Paragraph("\n Nombre de la gramática: ", font2);
                    parrafo1.add(new Paragraph("    "+this.nombre+"\n", font3));
                 Paragraph parrafo2 = new Paragraph("\n Descripcion de la gramática: ", font2);
                    parrafo2.add(new Paragraph("    "+this.descripcion+"\n", font3));
                 Paragraph parrafo3 = new Paragraph("\n Símbolos terminales: ", font2);
                    DefaultListModel term = this.term;
                    int i=0;
                    while(i<term.getSize()){
                        
                        parrafo3.add(new Paragraph("    "+term.getElementAt(i).toString(), font3));
                        i++;
                    }
                 Paragraph parrafo4 = new Paragraph("\n Símbolos no terminales: ", font2);
                    DefaultListModel nterm = this.noTerm;
                    i=0;
                    while(i<nterm.getSize()){
                        
                        parrafo4.add(new Paragraph("    "+nterm.getElementAt(i).toString(), font3));
                        i++;
                    }
                 Paragraph parrafo5 = new Paragraph("\n Símbolo inicial de la gramática: ", font2);
                    parrafo5.add(new Paragraph("    "+this.simbInicial,font3));
                 Paragraph parrafo6 = new Paragraph("\n Producciones de la gramática: ", font2);
                   
                    DefaultListModel produc = this.producciones;
                    DefaultListModel produc2 = new DefaultListModel();
                    i =0;
                    Object obj;
                    obj = "P {";
                    produc2.addElement(obj);
                    while (i < produc.size()){
                        obj = "   "+(i+1)+")   "+produc.getElementAt(i);
                        produc2.addElement(obj);
                        i++;
                    }
                    obj ="}";
                    produc2.addElement(obj);                    
                    
                    i=0;
                    while(i<produc2.getSize()){
                        
                        parrafo6.add(new Paragraph("    "+produc2.getElementAt(i).toString(), font3));
                        i++;
                    }
                                                     
               try {
                   
                    PdfWriter.getInstance(document, new FileOutputStream(fichero));
               } catch (DocumentException | FileNotFoundException ex) {
                   Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
               }
                
                document.open();
               try {
                   
                   document.add(imagen);
                   document.add(parrafo);
                   document.add(new Chunk(ls));
                   document.add(parrafo1);
                   document.add(parrafo2);
                   document.add(parrafo3);
                   document.add(parrafo4);
                   document.add(parrafo5);
                   document.add(parrafo6);
                   
               } catch (DocumentException ex) {
                   Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
               }
                
                document.close();
            } catch (BadElementException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            return false;
            
        }
     
     return true;
    }
 
    public boolean isNoTerminal (String nombre){
        int i=0;
        int encontrado = 0;
        ArrayList<NoTerminal> noTerminales = this.getNoTerm();

        while(i < noTerminales.size()){
            if(noTerminales.get(i).getNombre().equals(nombre)){
                encontrado = 1;
                break;
            }else{
                i++;
            }
        }
        if(encontrado == 1)
            return true;
        else
            return false;
    }

     public boolean isTerminal (String nombre){
        int i=0;
        int encontrado = 0;
        ArrayList<Terminal> terminales = this.getTerm();

        while(i < terminales.size()){
            if(terminales.get(i).getNombre().equals(nombre)){
                encontrado = 1;
                break;
            }else{
                i++;
            }
        }
        if(encontrado == 1)
            return true;
        else
            return false;
    }

    public void generarConjPrim(){
        int i=0;
        int j=0;
        int k=0;
        int encontrado=0;
        Iterator it;
        ArrayList<Terminal> terminales = new ArrayList();
        ArrayList<Produccion> producciones = new ArrayList();
        ArrayList<Terminal> conjPrim = new ArrayList();
        Map<String, String> despues = new HashMap<String, String>();
        Terminal term;
        NoTerminal nterm;
        Produccion pr;
        Simbolo primero;
        terminales = this.getTerm();
        producciones = this.getPr();              
      
        while(i < producciones.size()){
            pr = producciones.get(i);          
            nterm = pr.getAntec().getSimboloNT();  //Antecedente
            j=0;
            while(j < this.noTerminales.size()){
                if(this.noTerminales.get(j).getNombre().equals(nterm.getNombre())){
                    primero = pr.getConsec().get(0); //Primer simbolo del consecuente                    
                    conjPrim = this.noTerminales.get(j).getPrimeros();
                    
                    if(primero.getNombre().equals("\u03b5")){ // El primer simbolo del consecuente es epsilon
                        k=0;
                        encontrado=0;
                        while(k < conjPrim.size()){
                            if(conjPrim.get(k).getNombre().equals("\u03b5")){
                                encontrado = 1;
                            }
                            k++;
                        }
                        if(encontrado == 0)
                            conjPrim.add(new Terminal("\u03b5","\u03b5"));
                    }else {
                        if(isTerminal(primero.getNombre())){// El primer simbolo del consecuente es Terminal
                            k=0;
                            encontrado=0;
                            while(k < conjPrim.size()){
                                if(primero.getNombre().equals(conjPrim.get(k).getNombre())){
                                    encontrado = 1;
                                }
                                k++;
                            }
                            if(encontrado == 0){
                                conjPrim.add(new Terminal (primero.getNombre(), primero.getNombre()));
                            }
                        }else{ // El primer simbolo del consecuente es no Terminal
                            if(!this.noTerminales.get(j).getNombre().equals(primero.getNombre()) ){
                                despues.put(this.noTerminales.get(j).getNombre(), primero.getNombre());
                            }                            
                        }              
                    }
            
                    this.noTerminales.get(j).setPrimeros(conjPrim);
                    break;
                }else
                    j++;
            }
          i++;
        }
        // Si el primer simbolo del consecuente es un terminal se resuelve
        int x=0;
        while(x < 2){
            it = despues.keySet().iterator();      
            while(it.hasNext()){
                String nterminal = (String) it.next();
                String prim = despues.get(nterminal);            
                j=0;
                while(j < this.noTerminales.size()){
                    if(this.noTerminales.get(j).getNombre().equals(prim)){
                            terminales = this.noTerminales.get(j).getPrimeros();                        
                            break;
                    }else
                        j++;
                }
                j=0;
                int indice = -1;
                while(j < this.noTerminales.size()){
                    if(this.noTerminales.get(j).getNombre().equals(nterminal)){
                        conjPrim = this.noTerminales.get(j).getPrimeros();
                        indice = j;                    
                        break;
                    }else
                        j++;
                }
                j=0;
                while(j < terminales.size()){
                    encontrado = 0;
                    k=0;
                    while(k < conjPrim.size()){
                        if(conjPrim.get(k).getNombre().equals(terminales.get(j).getNombre())){                        
                            encontrado = 1;
                            break;
                        }else
                            k++;
                    }
                    if(encontrado == 0){
                        conjPrim.add(new Terminal(terminales.get(j).getNombre(), terminales.get(j).getNombre()));
                    }
                    j++;
                }
                this.noTerminales.get(indice).setPrimeros(conjPrim);            
            }      
            x++;
        }
    } 
  
    public void generarConjSig(){
       int i=0;
       int j=0;
       int k=0;
       int l=0;
       int m=0;
       int n=0;
       int o=0;
       int encontrado = 0;
       ArrayList<Terminal> conjSig = new ArrayList();
       ArrayList<Terminal> conjSig2 = new ArrayList();
       ArrayList<Terminal> conjPrim = new ArrayList();
       ArrayList<Produccion> producciones = this.getPr();
       ArrayList<Simbolo> consecuente = new ArrayList();
       Terminal terminal;
       NoTerminal antecedente;
       
       while(i < this.noTerminales.size()){ // $ al simbolo inicial
           if(this.noTerminales.get(i).getNombre().equals(this.simbInicial)){
               conjSig.add(new Terminal("$", "$"));
               this.noTerminales.get(i).setSiguientes(conjSig);
               break;
           }else
               i++;     
       }
       i=0;       
       while(i < producciones.size()){
           consecuente = producciones.get(i).getConsec();            
           j=1;
           while(j < consecuente.size()){
               //Si el simbolo posterior a un No terminal es un terminal forma parte del conjunto siguiente
               if(isNoTerminal(consecuente.get(j-1).getNombre()) && isTerminal(consecuente.get(j).getNombre())){
                    k=0;
                    while(k < this.noTerminales.size()){ 
                        if(this.noTerminales.get(k).getNombre().equals(consecuente.get(j-1).getNombre())){
                            conjSig = this.noTerminales.get(k).getSiguientes();
                        
                            l=0;
                            encontrado = 0;
                            while(l < conjSig.size()){
                                if(conjSig.get(l).getNombre().equals(consecuente.get(j).getNombre())){
                                    encontrado = 1;
                                    break;
                                }else
                                    l++;
                            }
                            if(encontrado == 0){                                
                                conjSig.add(new Terminal (consecuente.get(j).getNombre(),consecuente.get(j).getNombre()));                                                                
                            }
                            this.noTerminales.get(k).setSiguientes(conjSig);                           
                        }
                        k++;                       
                    }    
               }
               j++;
           }
           i++;
       }
               
       i=0;
       while(i < producciones.size()){
           consecuente = producciones.get(i).getConsec();
           antecedente = producciones.get(i).getAntec().getSimboloNT();
           j=1;
           while(j < consecuente.size()){                 
                //Si hay dos No terminales seguidos el primero del ultimo forma parte del conjunto siguiente del primero
                if(isNoTerminal(consecuente.get(j-1).getNombre()) && isNoTerminal(consecuente.get(j).getNombre())){
                     k=0;
                     while(k < this.noTerminales.size()){ 
                         if(this.noTerminales.get(k).getNombre().equals(consecuente.get(j).getNombre())){                                                                
                             conjPrim = this.noTerminales.get(k).getPrimeros();
                             break;
                         }else
                             k++;
                     }
                     k=0;
                     while(k < this.noTerminales.size()){ 
                         if(this.noTerminales.get(k).getNombre().equals(consecuente.get(j-1).getNombre())){                                                                
                             conjSig = this.noTerminales.get(k).getSiguientes();
                             l=0;
                             encontrado = 0;
                             while(l < conjPrim.size()){
                                 m=0;
                                 encontrado =0;
                                 while(m < conjSig.size()){   

                                     if(conjSig.get(m).getNombre().equals(conjPrim.get(l).getNombre())){
                                         encontrado = 1;
                                         break;
                                     }else
                                         m++;
                                 }
                                 if(encontrado == 0 && !conjPrim.get(l).getNombre().equals("\u03b5")){
                                     conjSig.add(new Terminal (conjPrim.get(l).getNombre(),conjPrim.get(l).getNombre()));                                        

                                 }
                                 //Si el conjunto primero contiene la palabra vacia:
                                 if(conjPrim.get(l).getNombre().equals("\u03b5")){

                                     m=0;
                                     encontrado = 0;
                                     n=0;
                                     while(n < this.noTerminales.size()){ 
                                         if(this.noTerminales.get(n).getNombre().equals(antecedente.getNombre())){                                                                            
                                             conjSig2 = this.noTerminales.get(n).getSiguientes();                                              
                                             break;
                                         }else
                                             n++;
                                     }                                         

                                     while(m < conjSig2.size()){
                                         n=0;
                                         encontrado =0;
                                         while(n < conjSig.size()){                                                
                                             if(conjSig2.get(m).getNombre().equals(conjSig.get(n).getNombre())){
                                                 encontrado = 1;
                                                 break;
                                             }else
                                                 n++;
                                         }
                                         if(encontrado ==0){
                                             conjSig.add(new Terminal(conjSig2.get(m).getNombre(), conjSig2.get(m).getNombre()));

                                         }
                                         m++;                                                                                                                                   
                                     }

                                     m=0;
                                     encontrado = 0;
                                     n=0;
                                     while(n < this.noTerminales.size()){ 
                                         if(this.noTerminales.get(n).getNombre().equals(consecuente.get(j).getNombre())){

                                             conjSig = this.noTerminales.get(n).getSiguientes();
                                             break;
                                         }else
                                             n++;
                                     }

                                     while(m < conjSig2.size()){
                                         encontrado=0;
                                         n=0;
                                         while(n < conjSig.size()){
                                             if(conjSig2.get(m).getNombre().equals(conjSig.get(n).getNombre())){
                                                 encontrado = 1;
                                                 break;
                                             }else
                                                 n++;
                                         }
                                         if(encontrado ==0){
                                             conjSig.add(new Terminal(conjSig2.get(m).getNombre(), conjSig2.get(m).getNombre()));                                                
                                         }
                                         m++;

                                     }
                                     m=0;
                                     encontrado = 0;
                                     n=0;
                                     while(n < this.noTerminales.size()){ 
                                         if(this.noTerminales.get(n).getNombre().equals(antecedente.getNombre())){

                                             conjSig2 = this.noTerminales.get(n).getSiguientes();
                                             break;
                                         }else
                                             n++;
                                     }

                                     n=0;
                                     while(n < this.noTerminales.size()){ 
                                         if(this.noTerminales.get(n).getNombre().equals(consecuente.get(j-1).getNombre())){

                                             conjSig = this.noTerminales.get(n).getSiguientes();
                                             break;
                                         }else
                                             n++;
                                     }

                                     while(m < conjSig2.size()){
                                         encontrado=0;
                                         n=0;
                                         while(n < conjSig.size()){
                                             if(conjSig2.get(m).getNombre().equals(conjSig.get(n).getNombre())){
                                                 encontrado = 1;
                                                 break;
                                             }else
                                                 n++;
                                         }
                                         if(encontrado ==0){
                                             conjSig.add(new Terminal(conjSig2.get(m).getNombre(), conjSig2.get(m).getNombre()));                                                
                                         }
                                         m++;                                            
                                     }
                                 }
                                 l++;
                             }

                         }
                         k++;
                     }                 
                 }

                 if(isNoTerminal(consecuente.get(consecuente.size()-1).getNombre())){                           
                     m=0;
                     encontrado = 0;
                     n=0;
                     while(n < this.noTerminales.size()){ 
                         if(this.noTerminales.get(n).getNombre().equals(antecedente.getNombre())){                                                                            
                             conjSig2 = this.noTerminales.get(n).getSiguientes();                              
                             break;
                         }else
                             n++;
                     } 
                     n=0;
                     while(n < this.noTerminales.size()){ 
                         if(this.noTerminales.get(n).getNombre().equals(consecuente.get(consecuente.size()-1).getNombre())){

                             conjSig = this.noTerminales.get(n).getSiguientes();
                             break;
                         }else
                             n++;
                     }

                     while(m < conjSig2.size()){

                         n=0;
                         encontrado =0;
                         while(n < conjSig.size()){                                                
                             if(conjSig2.get(m).getNombre().equals(conjSig.get(n).getNombre())){
                                 encontrado = 1;
                                 break;
                             }else
                                 n++;
                         }
                         if(encontrado ==0){
                             conjSig.add(new Terminal(conjSig2.get(m).getNombre(), conjSig2.get(m).getNombre()));

                         }
                         m++;                                                                                                                                   
                     }
                 }                    
                j++;
            }              
            i++;
       }
       i=0;
       while(i < producciones.size()){
           consecuente = producciones.get(i).getConsec();
           antecedente = producciones.get(i).getAntec().getSimboloNT();
           j=0;
           while(j < consecuente.size()){  
               if(isNoTerminal(consecuente.get(consecuente.size()-1).getNombre())){                           
                     m=0;
                     encontrado = 0;
                     n=0;
                     while(n < this.noTerminales.size()){ 
                         if(this.noTerminales.get(n).getNombre().equals(antecedente.getNombre())){                                                                            
                             conjSig2 = this.noTerminales.get(n).getSiguientes();                              
                             break;
                         }else
                             n++;
                     } 
                     n=0;
                     while(n < this.noTerminales.size()){ 
                         if(this.noTerminales.get(n).getNombre().equals(consecuente.get(consecuente.size()-1).getNombre())){

                             conjSig = this.noTerminales.get(n).getSiguientes();
                             break;
                         }else
                             n++;
                     }

                     while(m < conjSig2.size()){

                         n=0;
                         encontrado =0;
                         while(n < conjSig.size()){                                                
                             if(conjSig2.get(m).getNombre().equals(conjSig.get(n).getNombre())){
                                 encontrado = 1;
                                 break;
                             }else
                                 n++;
                         }
                         if(encontrado ==0){
                             conjSig.add(new Terminal(conjSig2.get(m).getNombre(), conjSig2.get(m).getNombre()));

                         }
                         m++;                                                                                                                                   
                     }
                 } 
                 j++;
           }
           i++;
       }
    }
  
    public void generarTPredictiva(){
        this.tpredictiva.construir(this);
    }

    public TablaPredictiva getTPredictiva(){

        return this.tpredictiva;
    }

    public void setTPredictiva(TablaPredictiva tabla){
        this.tpredictiva = tabla;
    }

    public void generarTLR(int i){                  
        this.tlr = new TablaLR(this);
        this.tlr.construir(i);      
    }

      public TablaLR getTlr() {
          return tlr;
      }

      public void setTlr(TablaLR tlr) {
          this.tlr = tlr;
      }      

      public ColCanLR0 getColeccionLR0() {
          return this.coleccionLR0;
      }

      public void setColeccionLR0(ColCanLR0 coleccionLR0) {
          this.coleccionLR0 = coleccionLR0;
      }

      public ColCanLR1 getColeccionLR1() {
          return coleccionLR1;
      }

      public void setColeccionLR1(ColCanLR1 coleccionLR1) {
          this.coleccionLR1 = coleccionLR1;
      }

      public ColCanLALR getColeccionLALR() {
          return coleccionLALR;
      }

      public void setColeccionLALR(ColCanLALR coleccionLALR) {
          this.coleccionLALR = coleccionLALR;
      }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
