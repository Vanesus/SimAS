//SimAS  /  Simulador
//Panel nueva simulacion descendente paso 1

package es.uco.simas.simulador;

import javax.swing.JOptionPane;
import es.uco.simas.util.gramatica.Gramatica;
import es.uco.simas.util.gramatica.Produccion;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

/**
 * @author Vanesa
 */
public class PanelNuevaSimDescPaso1 extends javax.swing.JPanel {

    private VentanaSimuladorDesc ventanaPadre;
    private Gramatica gramatica;        
    
    public PanelNuevaSimDescPaso1(VentanaSimuladorDesc ventanaPadre) {
        initComponents();
        this.ventanaPadre = ventanaPadre;
        this.gramatica = this.ventanaPadre.getGramatica();
                
        int recursiva = this.recursividad(this.gramatica);
        int factorizar = this.factorizar(this.gramatica);
        if(recursiva == 1){
            this.jLabel2.setText("La gramática original era recursiva por la izquierda.");
            this.jLabel2.setForeground(new java.awt.Color(162, 7, 7));
        }
        if(factorizar == 1){
            this.jLabel3.setText("La gramática original no estaba factorizada.");
            this.jLabel3.setForeground(new java.awt.Color(162, 7, 7));
        }
        if(factorizar == 0 && recursiva == 0){
            this.jLabel2.setText("La gramática original es correcta.");
            this.jLabel2.setForeground(new java.awt.Color(33, 77, 72));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(233, 244, 244));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Producciones para la simulacion Descendente:");

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/uco/simas/resources/ultimo.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/uco/simas/resources/siguiente.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/uco/simas/resources/anterior.png"))); // NOI18N
        jButton4.setEnabled(false);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/uco/simas/resources/primero.png"))); // NOI18N
        jButton5.setEnabled(false);

        jScrollPane1.setViewportView(jList1);

        jLabel2.setForeground(new java.awt.Color(44, 103, 71));

        jLabel3.setForeground(new java.awt.Color(162, 7, 7));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)))
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    public int recursividad(Gramatica gramatica){
        int recursiva = 0;
        DefaultListModel noTerminales = gramatica.getNoTerminales();
        DefaultListModel produc = gramatica.getProducciones();
        DefaultListModel produc2 = new DefaultListModel();
        StringBuilder nombre = new StringBuilder();
        StringBuilder prod = new StringBuilder();
        DefaultListModel eliminar = new DefaultListModel();
        ArrayList<Produccion> pr = new ArrayList();
        int i=0;   
        int l=0;
        int elim = -1;
        
        while(i < produc.size()){
            String valor = produc.getElementAt(i).toString();
            String antec = "";
            String [] separado;
            separado = valor.split(" ");
            antec = separado[0];                    
                      
            produc2.addElement(produc.getElementAt(i));
            
            if(antec.equals(separado[2])){    
                recursiva = 1;
                produc2.removeElement(produc.getElementAt(i));
                //Se crea el símbolo no terminal "Nombre'"
                nombre.delete(0,nombre.length());
                nombre = nombre.append(antec);
                nombre = nombre.append("'"); 
                int k=0;
                int iguales = 0;
                while(k < noTerminales.size()){                                 
                    if(noTerminales.getElementAt(k).toString().equals(nombre.toString())){
                        iguales = 1;
                        break;
                    }else
                        k++;                  
                }
                if(iguales == 0){                        
                    noTerminales.addElement(nombre.toString());                    
                    this.gramatica.setNoTerminales(noTerminales);
                }                                        
                                                  
                prod.delete(0,prod.length());                
                k=0;
                while(k < produc.size()){
                    String [] aux=produc.getElementAt(k).toString().split(" "); 
                   
                    if(aux[0].equals(antec) && !aux[0].toString().equals(aux[2].toString()) && produc.getElementAt(k) != produc.getElementAt(i) && i != k){                                                                        
                        eliminar.addElement(produc.getElementAt(k));                            
                                                
                        String valor2 = produc.getElementAt(k).toString();                        
                        String [] separado2 = valor2.split(" ");
                        prod.delete(0,prod.length());                         
                        prod = prod.append(antec).append(" \u2192");

                        l=2;
                        while(l<separado2.length){
                            if(!separado2[2].toString().equals("\u03b5"))
                                prod = prod.append(" ").append(separado2[l]);
                            l++;
                        }
                        prod = prod.append(" ").append(nombre.toString());
                        
                        l=0;
                        iguales = 0;
                        while(l < produc2.size()){
                            if(produc2.getElementAt(l).toString().equals(prod.toString())){
                                iguales = 1;
                                break;
                            }else
                                l++;
                        }
                        if(iguales == 0)
                            produc2.addElement(prod.toString());
                        
                    }
                        k++;                                                             
                }
                
                k=0;
                while(k < produc2.size()){
                    String [] aux=produc2.getElementAt(k).toString().split(" "); 
                    if(!aux[0].toString().equals(nombre) && !separado[3].toString().equals(aux[2].toString()) ){
                        prod.delete(0,prod.length());                
                        prod = prod.append(nombre.toString());
                        prod = prod.append(" \u2192");
                        int j=3;
                        while(j<separado.length){
                            prod = prod.append(" ");
                            prod = prod.append(separado[j]);
                            j++;
                        }
                        prod = prod.append(" ").append(nombre.toString());
                        l=0;
                        iguales = 0;
                        while(l < produc2.size()){
                            if(produc2.getElementAt(l).toString().equals(prod.toString())){
                                iguales = 1;
                                break;
                            }else
                                l++;
                        }
                        if(iguales == 0)
                            produc2.addElement(prod.toString());
                        
                        break;
                    }else
                        k++;
                }
                        prod.delete(0,prod.length());
                        prod = prod.append(nombre.toString()).append(" \u2192 ").append("\u03b5");                
                        
                        l=0;
                        iguales = 0;
                        while(l < produc2.size()){
                            if(produc2.getElementAt(l).toString().equals(prod.toString())){
                                iguales = 1;
                                break;
                            }else
                                l++;
                        }
                        if(iguales == 0)
                            produc2.addElement(prod.toString());                        
                        
            }else
                elim = -1;
            i++;
        }
               
        l=0;        
        
        while(l < eliminar.size()){
            int j=0;            
            while(j < produc2.size()){                
                if(produc2.getElementAt(j).toString().equals(eliminar.getElementAt(l).toString())){                                       
                    produc2.remove(j);                          
                }                   
                j++;
            }
            l++;
        }
                                     
        this.gramatica.setProducciones(new DefaultListModel());
        this.gramatica.setProducciones(produc2);          
        this.jList1.setModel(produc2);            
        this.gramatica = gramatica; 
        this.ventanaPadre.setGramatica(gramatica);
        return recursiva;
    }
    
    public int factorizar(Gramatica gramatica){
        int factorizar = 0;
        ArrayList<Integer> comprobado = new ArrayList<>();
        DefaultListModel noTerminales = gramatica.getNoTerminales();        
        DefaultListModel produc = gramatica.getProducciones();        
        DefaultListModel produc2 = new DefaultListModel();
        DefaultListModel aux;
        StringBuilder nombre = new StringBuilder();
        StringBuilder prod = new StringBuilder();
        int i=0; 
        int j=0;
        int k=0;
        int iguales=0;
        
        this.ventanaPadre.setPr(this.gramatica.getPr());
        this.ventanaPadre.setNoTerminales(this.gramatica.getNoTerm());
        
        while(i < produc.size()){
            String valor = produc.getElementAt(i).toString();            
            String [] separado = valor.split(" ");            
            String antec = separado[0];  
            aux = new DefaultListModel();
            k=0;
            
            if(!comprobado.isEmpty()){
                j=0;
                while(j < comprobado.size()){
                    if(comprobado.get(j) == i){
                        i++;
                        if(i<produc.size()){
                            valor = produc.getElementAt(i).toString();                            
                            separado = valor.split(" ");            
                            antec = separado[0]; 
                        }
                        break;
                    }else
                        j++;
                }
            }
            
            j=0;                   
            while(j < produc.size()){                       
                String valor2 = produc.getElementAt(j).toString();                
                String [] separado2 = valor2.split(" ");            
                String antec2 = separado2[0];

                if(antec.equals(antec2) && separado[2].toString().equals(separado2[2].toString()) && i != j ){                                        
                    comprobado.add(j);
                    factorizar = 1;
                    aux.addElement(produc.getElementAt(j));
                }
                j++;
            }            
               
            if(!aux.isEmpty()){
                j=0;
                while(j<aux.size()){
                    String valor2 = aux.getElementAt(j).toString();
                    String antec2 = "";
                    String [] separado2 = valor2.split(" ");            
                    antec2 = separado2[0];
                    nombre.delete(0,nombre.length());
                    nombre = nombre.append(antec);
                    nombre = nombre.append("'");  
                    k=0;
                    iguales = 0;
                    while(k < noTerminales.size()){                                 
                        if(noTerminales.getElementAt(k).toString().equals(nombre.toString())){
                            iguales = 1;
                            break;
                        }else
                            k++;                  
                    }
                    if(iguales == 0){                        
                        noTerminales.addElement(nombre.toString());
                    }else{

                        k=0;
                        while(k < produc2.size()){
                            String valor3 = produc2.getElementAt(k).toString();                                    
                            String [] separado3 = valor3.split(" "); 
                            if(antec.equals(separado3[0]) && !separado[2].equals(separado3[2])){                            
                                nombre = nombre.append("'");  
                                int m=0;
                                iguales = 0;
                                while(m < noTerminales.size()){                                 
                                    if(noTerminales.getElementAt(m).toString().equals(nombre.toString())){
                                        iguales = 1;
                                        break;
                                    }else
                                        m++;                  
                                }
                                if(iguales == 0){                        
                                    noTerminales.addElement(nombre.toString());
                                }
                                break;
                            }else
                                k++;
                        }

                    }

                    prod.delete(0,prod.length());
                    prod = prod.append(antec).append(" \u2192 ").append(separado[2]).append(" ").append(nombre);
                    k=0;
                    iguales=0;
                    while(k < produc2.size()){
                        if(produc2.getElementAt(k).toString().equals(prod.toString())){
                            iguales = 1;
                            break;
                        }else
                            k++;                        
                    }
                    if(iguales == 0){
                        produc2.addElement(prod.toString());
                    }

                    prod.delete(0,prod.length());
                    prod = prod.append(nombre).append(" \u2192");

                    if(separado.length > 3 ){
                        k=3;
                        while(k < separado.length){
                            prod = prod.append(" ").append(separado[k]);
                            k++;
                        }
                    }else{
                        prod = prod.append(" \u03b5");
                    }
                    k=0;
                    iguales=0;
                    while(k < produc2.size()){
                        if(produc2.getElementAt(k).toString().equals(prod.toString())){
                            iguales = 1;
                            break;
                        }else
                            k++;                        
                    }
                    if(iguales == 0){
                        produc2.addElement(prod.toString());
                    }

                    prod.delete(0,prod.length());
                    prod = prod.append(nombre).append(" \u2192");

                    if(separado2.length > 3){                       
                        k=3;
                        while(k < separado2.length){
                            prod = prod.append(" ").append(separado2[k]);
                            k++;
                        }
                    }else{
                         prod = prod.append(" \u03b5");      
                    }
                    k=0;
                    iguales=0;
                    while(k < produc2.size()){
                        if(produc2.getElementAt(k).toString().equals(prod.toString())){
                            iguales = 1;
                            break;
                        }else
                            k++;                        
                    }
                    if(iguales == 0){                        
                        produc2.addElement(prod.toString());                                                           
                    }                     
                    j++;
                }
            }else
                produc2.addElement(produc.get(i));
            
            i++;
        }
    
        if(produc2.size()!=0){
            this.gramatica.setProducciones(produc2);  
            this.gramatica.setNoTerminales(noTerminales);
            this.ventanaPadre.setGramatica(gramatica);
            this.jList1.setModel(produc2);
            this.gramatica = gramatica; 
        }
            
        return factorizar;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int conf = JOptionPane.showConfirmDialog(null, "¿Desea salir del asistente de la simulacion de la gramática?", "Salir",JOptionPane.YES_NO_OPTION);

        if(conf==0)
          this.ventanaPadre.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        PanelNuevaSimDescPaso2 paso2 = new PanelNuevaSimDescPaso2(this.ventanaPadre);
        this.gramatica.generarConjPrim();          
        this.gramatica.generarConjSig();
        paso2.construirConjuntos(this.gramatica);
        
        PanelNuevaSimDescPaso3 paso3 = new PanelNuevaSimDescPaso3(this.ventanaPadre);
        paso3.ConstruirTPredictiva(this.gramatica);
        
        this.ventanaPadre.cambiarPaso(4);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.ventanaPadre.cambiarPaso(2);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
